使用设备: cuda
训练集加载完成，共有 4000 个样本。
验证集加载完成，共有 32000 个样本。
添加了填充标记 '[PAD]' 到分词器。
数据预处理完成。
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
模型加载并调整词汇表完成。
/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/mnt/file2/changye/NLPFINAL/fine-tuning/trainer.py:67: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
[rank5]: Traceback (most recent call last):
[rank5]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 175, in <module>
[rank5]:     main(args)
[rank5]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 128, in main
[rank5]:     trainer.train()
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
[rank5]:     return inner_training_loop(
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
[rank5]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3655, in training_step
[rank5]:     loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
[rank5]:     outputs = model(**inputs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank5]:     return self._call_impl(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank5]:     return forward_call(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1643, in forward
[rank5]:     else self._run_ddp_forward(*inputs, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1459, in _run_ddp_forward
[rank5]:     return self.module(*inputs, **kwargs)  # type: ignore[index]
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank5]:     return self._call_impl(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank5]:     return forward_call(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 823, in forward
[rank5]:     return model_forward(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 811, in __call__
[rank5]:     return convert_to_fp32(self.model_forward(*args, **kwargs))
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 790, in convert_to_fp32
[rank5]:     return recursively_apply(_convert_to_fp32, tensor, test_type=_is_fp16_bf16_tensor)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 119, in recursively_apply
[rank5]:     {
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 120, in <dictcomp>
[rank5]:     k: recursively_apply(
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 127, in recursively_apply
[rank5]:     return func(data, *args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 782, in _convert_to_fp32
[rank5]:     return tensor.float()
[rank5]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 296.00 MiB. GPU 5 has a total capacity of 23.60 GiB of which 275.38 MiB is free. Including non-PyTorch memory, this process has 23.29 GiB memory in use. Of the allocated memory 22.48 GiB is allocated by PyTorch, and 400.32 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[rank5]: Traceback (most recent call last):
[rank5]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 175, in <module>
[rank5]:     main(args)
[rank5]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 128, in main
[rank5]:     trainer.train()
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
[rank5]:     return inner_training_loop(
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
[rank5]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3655, in training_step
[rank5]:     loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
[rank5]:     outputs = model(**inputs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank5]:     return self._call_impl(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank5]:     return forward_call(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1643, in forward
[rank5]:     else self._run_ddp_forward(*inputs, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1459, in _run_ddp_forward
[rank5]:     return self.module(*inputs, **kwargs)  # type: ignore[index]
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank5]:     return self._call_impl(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank5]:     return forward_call(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 823, in forward
[rank5]:     return model_forward(*args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 811, in __call__
[rank5]:     return convert_to_fp32(self.model_forward(*args, **kwargs))
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 790, in convert_to_fp32
[rank5]:     return recursively_apply(_convert_to_fp32, tensor, test_type=_is_fp16_bf16_tensor)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 119, in recursively_apply
[rank5]:     {
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 120, in <dictcomp>
[rank5]:     k: recursively_apply(
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 127, in recursively_apply
[rank5]:     return func(data, *args, **kwargs)
[rank5]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/accelerate/utils/operations.py", line 782, in _convert_to_fp32
[rank5]:     return tensor.float()
[rank5]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 296.00 MiB. GPU 5 has a total capacity of 23.60 GiB of which 275.38 MiB is free. Including non-PyTorch memory, this process has 23.29 GiB memory in use. Of the allocated memory 22.48 GiB is allocated by PyTorch, and 400.32 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)

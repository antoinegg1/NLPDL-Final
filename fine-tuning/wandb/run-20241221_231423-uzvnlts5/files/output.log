使用设备: cuda
训练集加载完成，共有 4000 个样本。
验证集加载完成，共有 32000 个样本。
添加了填充标记 '[PAD]' 到分词器。
数据预处理完成。
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
模型加载并调整词汇表完成。
/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/mnt/file2/changye/NLPFINAL/fine-tuning/trainer.py:67: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
[rank7]: Traceback (most recent call last):
[rank7]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 175, in <module>
[rank7]:     main(args)
[rank7]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 128, in main
[rank7]:     trainer.train()
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
[rank7]:     return inner_training_loop(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
[rank7]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3655, in training_step
[rank7]:     loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
[rank7]:     outputs = model(**inputs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank7]:     return self._call_impl(*args, **kwargs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank7]:     return forward_call(*args, **kwargs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1645, in forward
[rank7]:     return self._post_forward(output)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1620, in _post_forward
[rank7]:     passthrough_tensor_list = _DDPSink.apply(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/autograd/function.py", line 575, in apply
[rank7]:     return super().apply(*args, **kwargs)  # type: ignore[misc]
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 250, in forward
[rank7]:     ret = tuple(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 251, in <genexpr>
[rank7]:     inp.clone() if isinstance(inp, torch.Tensor) else inp for inp in inputs
[rank7]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 394.00 MiB. GPU 7 has a total capacity of 23.60 GiB of which 303.38 MiB is free. Including non-PyTorch memory, this process has 23.27 GiB memory in use. Of the allocated memory 22.56 GiB is allocated by PyTorch, and 297.93 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[rank7]: Traceback (most recent call last):
[rank7]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 175, in <module>
[rank7]:     main(args)
[rank7]:   File "/mnt/file2/changye/NLPFINAL/fine-tuning/main.py", line 128, in main
[rank7]:     trainer.train()
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
[rank7]:     return inner_training_loop(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
[rank7]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3655, in training_step
[rank7]:     loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
[rank7]:     outputs = model(**inputs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank7]:     return self._call_impl(*args, **kwargs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank7]:     return forward_call(*args, **kwargs)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1645, in forward
[rank7]:     return self._post_forward(output)
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1620, in _post_forward
[rank7]:     passthrough_tensor_list = _DDPSink.apply(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/autograd/function.py", line 575, in apply
[rank7]:     return super().apply(*args, **kwargs)  # type: ignore[misc]
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 250, in forward
[rank7]:     ret = tuple(
[rank7]:   File "/home/changye/miniconda3/envs/ML/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 251, in <genexpr>
[rank7]:     inp.clone() if isinstance(inp, torch.Tensor) else inp for inp in inputs
[rank7]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 394.00 MiB. GPU 7 has a total capacity of 23.60 GiB of which 303.38 MiB is free. Including non-PyTorch memory, this process has 23.27 GiB memory in use. Of the allocated memory 22.56 GiB is allocated by PyTorch, and 297.93 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
